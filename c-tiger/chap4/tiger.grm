%{
#include <stdio.h>
#include "util.h"
#include "symbol.h" 
#include "errormsg.h"
#include "absyn.h"

int yylex(void); /* function prototype */

A_exp absyn_root;

void yyerror(char *s)
{
 EM_error(EM_tokPos, "%s", s);
}
%}


%union {
	int pos;
	int ival;
	string sval;
	A_var var;
	A_exp exp;
	/* et cetera */
	}

%token <sval> ID STRING
%token <ival> INT

%token 
  COMMA COLON SEMICOLON LPAREN RPAREN LBRACK RBRACK 
  LBRACE RBRACE DOT 
  ARRAY IF THEN ELSE WHILE FOR TO DO LET IN END OF 
  BREAK NIL
  FUNCTION VAR TYPE 

%nonassoc ASSIGN
%left AND OR 
%nonassoc EQ NEQ LT LE GT GE
%left PLUS MINUS
%left TIMES DIVIDE
%left UMINUS

%type <exp> exp program
/* et cetera */

%start program

%%
program
	: exp	{absyn_root=$1;}

exp 
	: exp_val		{$$ = $1}
	| exp_seq		{$$ = $1}
	| exp_op		{$$ = $1}
	| exp_call		{$$ = $1}
	| exp_create	{$$ = $1}
	| exp_assign	{$$ = $1}
	| exp_if		{$$ = $1}
	| exp_while		{$$ = $1}	
	| exp_for		{$$ = $1}	
	| exp_break		{$$ = $1}	
	| exp_let		{$$ = $1}	

exp_val	
	: INT		{$$ = A_IntExp(EM_tokPos, $1);}
	| STRING	{$$ = A_StringExp(EM_tokPos, $1)}
	| NIL		{$$ = A_NilExp(EM_tokPos);}
	| lvalue	{$$ = $1;}

exp_seq 
	: LPAREN expList RPAREN	{$$ = A_SeqExp(EM_tokPos, $2)}

exp_op	
	: exp PLUS exp		{$$ = A_OpExp(EM_tokPos, A_plusOp, $1, $3);}
	| exp MINUS exp		{$$ = A_OpExp(EM_tokPos, A_minusOp, $1, $3);}
	| exp TIMES exp		{$$ = A_OpExp(EM_tokPos, A_timesOp, $1, $3);}
	| exp DIVIDE exp	{$$ = A_OpExp(EM_tokPos, A_divideOp, $1, $3);}
	| exp EQ exp		{$$ = A_OpExp(EM_tokPos, A_eqOp, $1, $3);}
	| exp NEQ exp		{$$ = A_OpExp(EM_tokPos, A_neqOp, $1, $3);}
	| exp LT exp		{$$ = A_OpExp(EM_tokPos, A_ltOp, $1, $3);}
	| exp LE exp		{$$ = A_OpExp(EM_tokPos, A_leOp, $1, $3);}
	| exp GT exp		{$$ = A_OpExp(EM_tokPos, A_gtOp, $1, $3);}
	| exp GE exp		{$$ = A_OpExp(EM_tokPos, A_geOp, $1, $3);}
	| MINUS exp %prec UMINUS
	
exp_call
	: ID LPAREN argfields RPAREN

exp_create
	: ID LBRACE efields RBRACE	{$$ = A_RecordExp(EM_tokPos, S_Symbol($1), $3);}
	| ID LBRACK exp RBRACK exp	{$$ = A_ArrayExp(EM_tokPos, S_Symbol($1), $3, $5);}

exp_assign
	: lvalue ASSIGN exp	{$$ = A_AssignExp(EM_tokPos, $1, $3);}

exp_if
	: IF exp THEN exp ELSE exp
						{$$ = A_IfExp(EM_tokPos, $2, $4, $6);}
	| IF exp THEN exp	{$$ = A_IfExp(EM_tokPos, $2, $4, A_NilExp(EM_tokPos));}
	| exp AND exp		{$$ = A_IfExp(EM_tokPos, $1, $3, A_IntExp(EM_tokPos, 1));}
	| exp OR exp		{$$ = A_IfExp(EM_tokPos, $1, A_IntExp(EM_tokPos, 0), $3);}

exp_while
	: WHILE exp DO exp	{$$ = A_WhileExp(EM_tokPos, $2, $4)}
			
exp_for
	: FOR ID ASSIGN exp TO exp DO exp
		{$$ = A_ForExp(EM_tokPos, S_Symbol($2), $4, $6, $8);}

exp_break
	: BREAK		{$$ = A_Break(EM_tokPos);}

exp_let
	: LET decs IN exp_seq END 	{$$ = A_LetExp(EM_tokPos, A_DecList(, ), $4);}

lvalue
	: ID						{$$ = A_VarExp(EM_tokPos, S_Symbol($1));}
	| lvalue DOT ID				{$$ = (EM_tokPos, )}
	| lvalue LBRACK exp RBRACK	{$$ = }

expList
	:							{$$ = NULL;}
	| exp						{$$ = A_ExpList($1, $2);}
	| exp SEMICOLON expList 	{$$ = A_ExpList($1, $3);}
	
argfields
	:							{$$ = NULL;} 
	| exp						{$$ = A_ExList(EM_tokPos, $1, $2);}
	| exp COMMA argfields		{$$ = A_ExList(EM_tokPos, $1, $3);}

efields
	|
	: efield efieldList	{$$ = A_Record()}

efieldList
	:							{$$ = NULL;} 
	| COMMA efield efieldList	{$$ = A_EfieldList($1, $2);}

efield
	: ID EQ exp		{$$ = A_Efield(S_Symbol($1), $3);}

decs
	:			{$$ = NULL;} 
	| dec decs	{$$ = A_DecList($1, $2);}			

dec 
	: tydec		{$$ = $1;}
	| vardec	{$$ = $1;}
	| fundec	{$$ = $1;}

tydec
	| nametyList	{$$ = A_TypeDec(EM_tokPos, $1);}

nametyList
	:					{$$ = NULL;} 
	| _tydec nametyList	{$$ = nametyList($1, $2);}

_tydec
	: TYPE ID EQ ty 	{$$ = A_Namety(EM_tokPos, S_Symbol($2));}

ty
	: ID						{$$ = A_NameTy(EM_tokPos, S_Symbol($1));}
	| ARRAY OF ID				{$$ = A_ArrayTy(EM_tokPos, S_Symbol($3));}
	| LBRACE tyfields RBRACE	{$$ = A_RecordTy(EM_tokPos, $2);}

tyfields
	:					{$$ = NULL;} 
	| field tyfieldList	{$$ = A_FieldList($1, $2);}

tyfieldList:
	| COMMA field tyfieldList	{$$ = A_FieldList($2, $3);}

field
	: ID COLON ID	{$$ = A_Field(EM_tokPos, S_Symbol($1), S_Symbol($3));}

vardec
	: VAR ID ASSIGN exp				{$$ = A_VarDec(EM_tokPos, S_Symbol($2), NULL, $4);}
	| VAR ID COLON ID ASSIGN exp	{$$ = A_VarDec(EM_tokPos, S_Symbol($2), S_Symbol($4), $6);}

fundec
	: fundecList	{$$ = A_FunctionDec(EM_tokPos, $1);}

fundecList
	:						{$$ = NULL;} 
	| _fundec fundecList	{$$ = A_funcdecList(EM_tokPos, $1, $2);}

_fundec
	: FUNCTION ID LPAREN tyfields RPAREN EQ exp
		{$$ = A_fundec(EM_tokPos, S_Symbol($2), $4, NULL, $7);}
	| FUNCTION ID LPAREN tyfields RPAREN COLON ID EQ exp
		{$$ = A_fundec(EM_tokPos, S_Symbol($2), $4, S_Symbol(7), $9);}


	
